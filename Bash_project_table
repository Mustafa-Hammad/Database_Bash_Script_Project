#!/bin/bash 

# create Tables using bash script

# By Mustafa Raed and Aya Alagamy 

echo "Connected to Database $c"
ls ./$c

select choice in "Press 1 to Drop Table                                                                                                              " "Press 2 to Creat Table                                                                                                                             " "Press 3 to Insert Into Table                                                                                                                       " "Press 4 to Select From Table                                                                                                                       " "Press 5 to Delete From Table                                                                                                                       " "Press 6 to Update From Table                                                                                                                       " "Press 7 to Exiti" 

do 

	# Drop
	while ([ $REPLY -eq "1" ])
		do 
			echo -n "Please enter Table name  ";
			read n 
			 if [ ! -f "./$c/$n.csv" ]
                        then
                                echo "No Table with $n Name"
				echo "Avilibol Table :   " 
				ls ./$c
                                break
			else

				rm ./$c/$n.csv
				echo "table $n has been deleted "
				break
			fi
		done


	# Create
	while ([ $REPLY -eq "2" ])
                do
                         
			echo -n "Please enter Table name  ";
                        read n
       					
                       	if [ ! -f "./$c/$n.csv" ] 
			then 
			

				echo -e "Number of Columns: \c"
			  	read colsNum
  				counter=1
  				sep=","
  				pK=""
				pkColumn=""
				dataType=""
  				metaData=""


  				while [ $counter -le $colsNum ]
  					do
    						echo -e "Name of Column No.$counter: \c"
    						read colName

    						echo -e "Type of Column $colName: "
    						select var in "int" "str"
    						do
      							case $var in
        						int ) colType="int";break;;
        						str ) colType="str";break;;
       				 			* ) echo "Wrong Choice" ;;
      							esac
    						done
   						
						if [[ $pK == "" ]]; then
     							pK="PK"
							pkColumn+=$pK
							dataType+=$colType
      							metaData+=$colName$sep$colType$sep$pK
     
    						else
							dataType+=$sep$colType
      							metaData+=$sep$colName$sep$colType
    						fi
    
    						if [[ $counter == $colsNum ]]; then
      							temp=$temp$colName
    						else
      							temp=$temp$colName$sep  
    						fi
    						
						((counter++))
  					done
				touch ./$c/$n.csv
				touch ./$c/"$n"_metaData.csv
	 			echo -e $pkColumn >> ./$c/"$n"_metaData.csv
				echo -e $dataType  >> ./$c/"$n"_metaData.csv
 				echo -e $metaData"\t number of culomn = "$colsNum  >> ./$c/"$n"_metaData.csv
  				echo -e $temp >> ./$c/$n.csv
    				echo "Table Created Successfully"
				pkColumn=""
				dataType=""
				metaData=""
				temp=""
				break
			else 
				echo "Table alredy exist  "
               			break
			fi		

		done


	# Insert
	while ([ $REPLY -eq "3" ])
                do
			echo -n "Please enter table name to connect  ";
                        read n
	
			if [ ! -f "./$c/$n.csv" ] 
			then 
				echo "Table not exist  "
				break

			else 
				colsNum=` awk 'BEGIN{FS=","}{if(NR==1) print  NF}' ./$c/$n.csv`
 				sep=","
  				for (( i = 1; i <= $colsNum; i++ )); 
					do
						
    						colKey=$(awk 'BEGIN{FS=","}{ if(NR==1) print $'$i'}' ./$c/"$n"_metaData.csv)
    						colType=$( awk 'BEGIN{FS=","}{if(NR==2) print $'$i'}' ./$c/"$n"_metaData.csv)
    						colName=$( awk 'BEGIN{FS=","}{if(NR==1) print  $'$i'}' ./$c/$n.csv)
    						echo -e "$colName ($colType) = \c"
    						read data
						


    			# Validate Input
   						if [[ $colType == "int" ]]; 
							then
      								while ! [[ $data =~ ^[0-9]*$ ]]; 
									do
        									echo -e "invalid DataType !!"
        									echo -e "$colName ($colType) = \c"
        									read data
      									done
    						fi

    						if [[ $colKey == "PK" ]]; 
							then
	      							while [[ true ]];
									do
        					if [[ $data =~ ^[`awk 'BEGIN{FS="," ; ORS=" "}{if(NR != 1)print $(('$i'-1))}' ./$c/$n.csv`]$ ]]; 								then
          							echo -e "invalid input for Primary Key !!"
        								else
         	 								break;
        					fi
        						echo -e "$colName ($colType) = \c"
        						read data
      							done
    						fi

    			#Set row
    						if [[ $i == $colsNum ]]; then
      							row=$row$data
    						else
      							row=$row$data$sep
    						fi
					done
  				echo -e $row >> ./$c/$n.csv
    				echo "Data Inserted Successfully"
				row=""

				break
			fi
		done

	# Select		
	while  ([ $REPLY -eq "4" ])
                do
			echo -n "Please enter Table name  ";
                        read m
			
			if [ ! -f "./$c/$m.csv" ] 
			then 
				echo "Table not exist  "
				break

			else 
				echo -n "Select all (y/n)";
				read g
                         
				if [ $g == "y" ]
                        	   then
                        	  	 colsNum=` awk 'BEGIN{FS=","}{if(NR==1) print  NF}' ./$c/$m.csv`
                                         rowsNum=` awk 'END{ print  NR}' ./$c/$m.csv`
  				        for (( i = 1; i <= $rowsNum; i++ )); 
						do 
							for (( y = 1; y <= $colsNum; y++ )); 
								do 
									colName=$( awk 'BEGIN{FS=","}{if(NR=='$i') print  $'$y'}' ./$c/$m.csv)
									temp1=$temp1$colName"||" 
									columnsep=$columnsep"======="
								done
							echo $temp1
							echo $columnsep
							temp1=""
							columnsep=""
						done 
					 break
                          
				   else       
                     		    	echo -n " Enter the word you want to select  ";
                       		   	read word
 					colsNum=` awk 'BEGIN{FS=","}{if(NR==1) print  NF}' ./$c/$m.csv`
                                        rowsNum=`awk '/'$word'/ {print NR}' ./$c/$m.csv`
  				       
							for (( y = 1; y <= $colsNum; y++ )); 
								do 
									colName=$( awk 'BEGIN{FS=","}{if(NR==1) print  $'$y'}' ./$c/$m.csv)
									temp1=$temp1$colName"||" 
									columnsep=$columnsep"======="
								done
							echo $temp1
							echo $columnsep
							temp1=""
							columnsep=""
							for (( y = 1; y <= $colsNum; y++ )); 
								do 
									colName=$( awk 'BEGIN{FS=","}{if(NR=='$rowsNum') print  $'$y'}' ./$c/$m.csv)
									temp1=$temp1$colName"||" 
									columnsep=$columnsep"======="
								done
							echo $temp1
							echo $columnsep
							temp1=""
							columnsep=""
				        	break
 				   fi
			fi
               	done


	# Delete
        while ([ $REPLY -eq "5" ])
                do
                        ls ./$c
                        echo -n "Please enter table name ";
                        read n
			
			if [ ! -f "./$c/$n.csv" ] 
			then 
				echo "Table not exist  "
				break

			else 
                       		echo -n "Please enter Primary Key  ";
                        	read m
                        	sed '/'$m'/d' ./$c/$n.csv
				echo "Row deleted Successfully"
                        	break
			fi
                done


	# Update
	while ([ $REPLY -eq "6" ])
                do
                        echo -n "Please enter table name  ";
                        read n
			
			if [ ! -f "./$c/$n.csv" ] 
			then 
				echo "Table not exist  "
				break

			else 
                       		echo -n "Please enter Primary Key  ";
                        	read m
 				echo -n "Please enter old info  ";
                        	read old
 				echo -n "Please enter new info  ";
                        	read new
                        	sed -i -e '/'$m'/s/'$old'/'$new'/' ./$c/$n.csv
				echo "Data updated Successfully"
                        	break
			fi
                done

	# Exit
	while ([ $REPLY -eq "7" ])
                do 
			./Bash_project
                        
                        break
                done
done
